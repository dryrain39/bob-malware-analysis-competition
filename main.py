import os
import sys
import pefile
import re

okk = 0
mmm = 0


def detect(path):
    global okk
    global mmm
    mal = False
    try:
        pe = pefile.PE(path)

        cnt = 0
        soffset = 0
        foffset = 0

        for section in pe.sections:
            cnt += 1
            if cnt == 2:
                soffset = section.VirtualAddress

            if cnt == 4:
                foffset = section.VirtualAddress

            # print(section.VirtualAddress)
            # print(section.Name, hex(section.VirtualAddress),
            #       hex(section.Misc_VirtualSize), section.SizeOfRawData)

        # print(pe.sections[1].get_data().find(b'\x42\x4F\x42\x44'))
        # print(pe.sections[1].get_data(start=(0x11000 + 0x53C0 + 0x4), length=1))


        for i in [1, 3]:
            # offset = pe.sections[i].get_data().find(b'\x42\x4F\x42\x44')
            offset = [m.start() for m in re.finditer(b'\x42\x4F\x42\x44', pe.sections[i].get_data())]

            for offff in offset:

                if mal == True:
                    break

                try:
                    of = 0

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # print(data)
                    if data == b'D':
                        pass
                    else:
                        mal = False
                        break

                    nextoffset = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of),
                                                         length=1)
                    of += ord(nextoffset) + 1
                    # print(str(nextoffset), '--->', str(ord(nextoffset)))

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # print(data)
                    if data == b'F':
                        pass
                    else:
                        mal = False
                        break

                    nextoffset = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of),
                                                         length=1)
                    of += ord(nextoffset) + 1
                    # print(str(nextoffset), '--->', str(ord(nextoffset)))

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # print(data)
                    if data == b'N':
                        pass
                    else:
                        mal = False
                        break

                    nextoffset = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of),
                                                         length=1)
                    of += ord(nextoffset) + 1
                    # print(str(nextoffset), '--->', str(ord(nextoffset)))

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # print(data)
                    if data == b'O':
                        pass
                    else:
                        mal = False
                        break

                    nextoffset = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of),
                                                         length=1)
                    of += ord(nextoffset) + 1
                    # print(str(nextoffset), '--->', str(ord(nextoffset)))

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # print(data)
                    if data == b'1':
                        pass
                    else:
                        mal = False
                        break

                    nextoffset = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of),
                                                         length=1)
                    of += ord(nextoffset) + 1
                    # print(str(nextoffset), '--->', str(ord(nextoffset)))

                    data = pe.sections[1].get_data(start=(pe.sections[1].VirtualAddress + offff + 0x4 + of - 1),
                                                   length=1)
                    # # print(data)
                    # if data == b'\x00':
                    #     pass
                    # else:
                    #     mal = False
                    #     break

                    print("악성xx " + path)
                    mal = True

                except Exception:

                    pass

        if mal == False:
            print("정상oo " + path)
            okk += 1
        else:
            mmm += 1

    except Exception:
        if mal == False:
            print("패스pp " + path)
        pass


def getcheck(filename):
    print(filename)


def search(dirname):
    for (path, dir, files) in os.walk(dirname):
        for filename in files:
            detect(os.path.join(path, filename))


if __name__ == "__main__":

    search(sys.argv[1])
    print(okk, mmm)
    input()
